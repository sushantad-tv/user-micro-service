name: User Service Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Sonar Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}

      - name: Sonar Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  unit-tests:
    name: Unit Tests
    needs: [ static-analysis ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm run unit

  integration-tests:
    name: Integration Tests
    needs: [ unit-tests ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm run integration

  integration-tests:
    name: Integration Tests
    needs: [ smoke-tests ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Install Dependencies
        run: npm install

      - name: Run Smoke Tests
        run: npm run smoke  

  deploy:
    name: Deploy
    needs: [ unit-tests,integration-tests ]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && failure() != true && needs.unit-tests.result == 'success'

    steps:
      - name: Deploy Service
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  smoke-tests:
    name: Smoke Tests
    needs: [ deploy ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Run Tests
        run: |
          npm install
          npm run smoke

      - name: Upload Mochawesome Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: mochawesome-report

  generate-report:
    name: Generate Report
    needs: [ regression-tests ]
    runs-on: ubuntu-latest

    steps:
      - name: Download Mochawesome Report
        uses: actions/download-artifact@v3
        with:
          name: test-results
          path: mochawesome-report

      - name: Prepare Report Directory
        run: |
          mkdir report
          cp -r mochawesome-report/* report
          mv report/mochawesome.html report/index.html

      - name: Deploying to Github Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
          publish_dir: report